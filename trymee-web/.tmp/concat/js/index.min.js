(function() {
  'use strict';

    angular.module('tm', ['ngRoute', 'ngResource', 'ngAnimate', 'angular-loading-bar', '720kb.datepicker', 'angular-google-analytics', 'angular-intro']).config(["$routeProvider", function($routeProvider){

        $routeProvider.
        
        when('/', {
            templateUrl : 'partials/process/pesq-process.html',
            controller  : 'PesqProcessController'
        }).
        
        when('/login', {
            templateUrl : 'partials/login/login.html',
            controller  : 'LoginController'
        }).

        // Question
        when('/pesq-question', {
            templateUrl : 'partials/question/pesq-question.html',
            controller  : 'PesqQuestionController'
        }).

        when('/cad-question', {
            templateUrl : 'partials/question/cad-question.html',
            controller  : 'CadQuestionController'
        }).

        when('/edit-question/:id', {
            templateUrl : 'partials/question/cad-question.html',
            controller  : 'CadQuestionController'
        }).

        // Test
        when('/pesq-test/', {
            templateUrl : 'partials/test/pesq-test.html',
            controller  : 'PesqTestController'
        }).

        when('/cad-test', {
            templateUrl : 'partials/test/cad-test.html',
            controller  : 'CadTestController'
        }).

        when('/edit-test/:id', {
            templateUrl : 'partials/test/cad-test.html',
            controller  : 'CadTestController'
        }).

        // Process
        when('/pesq-process', {
            templateUrl : 'partials/process/pesq-process.html',
            controller  : 'PesqProcessController'
        }).
        
        when('/summary-process/:id', {
            templateUrl : 'partials/process/summary-process.html',
            controller  : 'SummaryProcessController'
        }).

        when('/cad-process', {
            templateUrl : 'partials/process/cad-process.html',
            controller  : 'CadProcessController'
        }).

        when('/edit-process/:id', {
            templateUrl : 'partials/process/cad-process.html',
            controller  : 'CadProcessController'
        }).
        
        when('/correct-test/', {
            templateUrl : 'partials/process/correct-test.html',
            controller  : 'CorrectTestController'
        }).
        
        // Candidate
        when('/pesq-candidate', {
            templateUrl : 'partials/candidate/pesq-candidate.html',
            controller  : 'PesqCandidateController'
        }).

        when('/cad-candidate', {
            templateUrl : 'partials/candidate/cad-candidate.html',
            controller  : 'CadCandidateController'
        }).

        when('/edit-candidate/:id', {
            templateUrl : 'partials/candidate/cad-candidate.html',
            controller  : 'CadCandidateController'
        }).
        
        //User
        when('/edit-user', {
            templateUrl : 'partials/user/cad-user.html',
            controller  : 'CadUserController'
        }).
        
        when('/404', {
            templateUrl : 'partials/error/404.html'            
        }).

        otherwise('/404');

    }]);
    
    angular.module('tm').config(['AnalyticsProvider', function (AnalyticsProvider) {
    	AnalyticsProvider.setAccount('UA-101164232-2');
    }]).run(['Analytics', function(Analytics) {}]);

})();
(function() {
    'use strict';

    angular.module('tm').controller('PesqProcessController', ["$scope", "$timeout", "ProcessService", "ngIntroService", function($scope, $timeout, ProcessService, ngIntroService) {

        $scope.processes = [];
        
        ngIntroService.refresh();

        $scope.buscar = function () {

        	ProcessService.query({description: $scope.description}, function (data) {

        		$scope.processes = data;

        		noResultforSearch($scope, data);

        	}, function (err) {

        		console.log(err);

        	});

        };

        $scope.IntroOptions = {
    			steps : [{
    	    		intro: 'Esta é a pesquisa de processos, aqui você pode buscar os processos criados previamente.'
    	    	},
    	    	{
    	    		element: document.querySelector('#process-step2'),
    	    		intro: 'Basta utilizar esta barra de busca com qualquer termo relacionado ao processo desejado.',
    	    		position: 'bottom'
    	    	},
    	    	{
    	    		element: document.querySelector('#process-step3'),
    	    		intro: 'Clique aqui para criar um novo processo.',
    	    		position: 'top'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};
        
//        createTourStep ('#title', 'Esta é a pesquisa de processos, aqui você pode buscar os processos criados previamente.', 'bottom', $scope.IntroOptions);
//        createTourStep ('#searchBar', 'Basta utilizar esta barra de busca com qualquer termo relacionado ao processo desejado.', 'bottom', $scope.IntroOptions);
//        createTourStep ('#addButton', 'Clique aqui para criar um novo processo.', 'top', $scope.IntroOptions);

//        $scope.endIntro = function (targetElement, scope) {
//        	console.info('endIntro()');
//        	saveIntroStatus(PESQ_PROCESS, READ);
//        };

//        $timeout(function () {
//
//        	if (getIntroStatus(PESQ_PROCESS) == UNREAD)
//        		$scope.startIntro();
//
//        }, 2000)

  }]);

})();
(function() {
    'use strict';

    angular.module('tm').controller('CadProcessController', ["$scope", "$routeParams", "ProcessService", "TestService", "CandidateService", "ngIntroService", function($scope, $routeParams, ProcessService, TestService, CandidateService, ngIntroService){
        
        var init = function () {

            $scope.searchTest = '';
            $scope.searchCandidate = '';
            
            ngIntroService.refresh();
            
            $scope.process = {
                active: true,
                test: null,
                candidates: [],
                links: []
            };

            $scope.selectedTest = null;
            $scope.availableTests = [];
            $scope.availableCandidates = [];
            $scope.selectedCandidates = [];
            
            if ($routeParams.id) {

    			ProcessService.get({id: $routeParams.id}, function (data) {

    				if(data){
    					
    					var dtProcess = data.startDate.split('-');
    					
    					var dtConverted = dtProcess[2] + '/' + dtProcess[1] + '/' + dtProcess[0];
    					
    					data.startDate = dtConverted; 

    					$scope.process = data;
    					$scope.selectedTest = data.test;
    					
    					if (data.candidates) {
    						$scope.selectedCandidates = data.candidates;
    					} else {
    						$scope.selectedCandidates = [];
    					}

    				} else {

    					Materialize.toast('Erro ao carregar o processo. Tente novamente.', 6000, 'rounded');

    				}

    			}, function (err) {

    				Materialize.toast('Erro ao carregar o processo. Tente novamente.', 6000, 'rounded');
    				console.error('Erro ao carregar a prova', err);

    			});

    		};

        };
        
        $scope.IntroOptions = {
    			steps : [{
    	    		//element: document.querySelector('#cad-process-step1'),
    	    		intro: 'Aqui você pode criar ou alterar um processo seletivo, selecionando a prova e os candidatos envolvidos.'//,
    	    		//position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-proc-step1'),
    	    		intro: 'Aqui você deve preencher um descritivo de seu processo seletivo, que contenha todas as informações necessárias para sua identificação posterior. Exemplo "Processo para vaga de desenvolvedor Java Jr para a equipe de desenvolvimento do cliente XPTO. Solicitado por Fulano, em 01/01/2017".',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-proc-step2'),
    	    		intro: 'Selecione aqui a data de início do processo seletivo, ou seja, quando efetivamente começou ou começará o processo. Usualmente é a data atual.',
    	    		position: 'top'
    	    	},{
    	    		element: document.querySelector('#cad-proc-step3'),
    	    		intro: 'Digite aqui termos para buscar a prova desejada para associar ao processo seletivo. Este campo não é obrigatório, você pode criar o processo sem prova e posteriormente editar para adicionar a prova.',
    	    		position: 'top'
    	    	},{
    	    		element: document.querySelector('#cad-proc-step4'),
    	    		intro: 'Digite aqui os termos para buscar os candidatos que participarão do processo. Este campo também não é obrigatório, você pode criar o processo sem candidatos e editar o mesmo para associar candidatos depois.',
    	    		position: 'top'
    	    	},{
    	    		element: document.querySelector('#cad-proc-step5'),
    	    		intro: 'Após o preenchimento das informações, basta clicar aqui para salvar seu processo seletivo.',
    	    		position: 'top'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

        $scope.save = function () {
        	
        	if ($scope.form.$valid) {
                
                if ($scope.selectedTest != null && $scope.selectedTest.id != null) {
                    $scope.process.test = $scope.selectedTest;
                };
                
                if ($scope.selectedCandidates != null && $scope.selectedCandidates.length > 0) {
                    $scope.process.candidates = $scope.selectedCandidates;
                };
                
                $scope.process.strStartDate = $scope.process.startDate;
                
                if ($scope.process.id){
                	
                    ProcessService.update($scope.process, function (data) {

                        Materialize.toast('Processo atualizado com sucesso.', 6000, 'rounded');
                        $scope.searchTest = '';
                        $scope.searchCandidate = '';
                        
                        $scope.process = {
                            active: true,
                            test: null,
                            candidates: [],
                            links: []
                        };

                        $scope.selectedTest = null;
                        $scope.availableTests = [];
                        $scope.availableCandidates = [];
                        $scope.selectedCandidates = [];

                    }, function(err){
                        
                        console.error('Erro ao salvar processo!', err);
                        Materialize.toast('Erro ao salvar processo, tente novamente.', 6000, 'rounded');
                        
                    });
                	
                } else {
                	
                    ProcessService.save($scope.process, function (data) {

                        Materialize.toast('Processo salvo com sucesso.', 6000, 'rounded');                    
                        $scope.searchTest = '';
                        $scope.searchCandidate = '';
                        
                        $scope.process = {
                            active: true,
                            test: null,
                            candidates: [],
                            links: []
                        };

                        $scope.selectedTest = null;
                        $scope.availableTests = [];
                        $scope.availableCandidates = [];
                        $scope.selectedCandidates = [];

                    }, function(err){
                        
                        console.error('Erro ao salvar processo!', err);
                        Materialize.toast('Erro ao salvar processo, tente novamente.', 6000, 'rounded');
                        
                    });
                	
                }
        		

        		
        	}

        };

        $scope.searchTests = function () {

        	TestService.query({searchText: $scope.searchTest}, function (data) {
                
                if (data != null && data.length > 0) {
                    
                    $scope.availableTests = data;
                    
                } else {
                    
                    Materialize.toast('Não foram encontradas provas com esse termo.', 6000, 'rounded');
                    $scope.availableTests = [];
                    
                };

        	}, function (err) {

        	});

        };

        $scope.searchCandidates = function () {

        	CandidateService.query({searchText: $scope.searchCandidate}, function (data) {

                if (data != null && data.length > 0) {

                    $scope.availableCandidates = data;

                } else {

                    Materialize.toast('Não foram encontrados candidatos com esse termo.', 6000, 'rounded');
                    $scope.availableCandidates = [];

                };

            }, function (err) {

        	});

        };
        
        $scope.selectTest = function (test) {
        	
        	$scope.selectedTest = test;
        	$scope.availableTests = [];
            
        };
        
        $scope.removeTest = function () {
        	
        	$scope.selectedTest = null;
        	
        };
        
        $scope.selectCandidate = function (candidate) {
        	
        	moveElement(candidate, $scope.availableCandidates, $scope.selectedCandidates);
            
        };
        
        $scope.removeCandidate = function (candidate) {
        	
        	moveElement(candidate, $scope.selectedCandidates, $scope.availableCandidates);
            
        };
        
        var moveElement = function(obj, from, to) {

            var i = 0;

            while(i < from.length) {

                var actual = from[i];

                if(obj.id == actual.id) {
                    
                    from.splice(i, 1);
                    to.push(actual);
                    break;
                }
                
                i++;
            }
        };
        
        init();

  }]);

})();
(function() {
    'use strict';

    angular.module('tm').controller('SummaryProcessController', ["$scope", "$routeParams", "$http", "LocationService", "TestGradeService", "TestService", "ProcessService", "ngIntroService", function($scope, $routeParams, $http, LocationService, TestGradeService, TestService, ProcessService, ngIntroService){
        
        var init = function () {

            $scope.process = {};
            $scope.testGrades = [];
            $scope.tab = 0;
            
            ngIntroService.refresh();

            if ($routeParams.id) {
            	
            	$scope.processId = $routeParams.id;

            	$http.get(LocationService.getHost() + '/processes/summary/' + $routeParams.id).then(function (data) {
            		
            		$scope.process = data.data;
            		
            	}, function (err) {
            		
            		console.error(err.data);
            		
            	});

    		};
    		
    		$('.tooltipped').tooltip({delay: 50});

        };
        
        $scope.IntroOptions = {
    			steps : [{
    	    		//element: document.querySelector('#summary-step1'),
    	    		intro: 'Este é o sumário do seu processo seletivo.'//,
    	    		//position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#summary-step1'),
    	    		intro: 'Este painel exibe o status atual do seu processo, desde a quantidade de candidatos envolvidos até a nota média das provas já respondidas. Basta posicionar o mouse sobre cada ícone para uma descrição detalhada do conteúdo exibido.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#summary-step2'),
    	    		intro: 'Clicando aqui você pode verificar todas as notas dos candidatos que já responderam a prova. Caso haja alguma "Correção parcial", você pode clicar no próprio link para efetuar a correção manual das questões dissertativas e finalizar a correção.',
    	    		position: 'top'
    	    	},{
    	    		element: document.querySelector('#summary-step3'),
    	    		intro: 'Clicando aqui você pode visualizar a prova que os candidatos respondem, porém com as respostas corretas já indicadas.',
    	    		position: 'top'
    	    	},{
    	    		element: document.querySelector('#summary-step4'),
    	    		intro: 'Clicando aqui você pode visualizar a lista de candidatos envolvidos no processo, verificar o status da prova(se já foi ou não enviada e respondida), e enviar ou reenviar cada link para a prova indivudualmente.',
    	    		position: 'top'
    	    	},{
    	    		element: document.querySelector('#summary-step5'),
    	    		intro: 'Aqui você tem os atalhos para: Finalizar processo/Reativar processo  - Permite finalizar o processo/Reativar um processo já finalizado. Enviar links - Envia ou reenvia todos os links pendentes de resposta para todos os candidatos do processo. Novo candidato - Redireciona para o cadastro de candidato, já associando ao processo ao salvar. Editar processo -Permite editar o processo, alterando os dados e adicionando/removendo prova e candidatos.',
                    position: 'top'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

        $scope.sendLinks = function (idCandidate) {
        	
        	var url = LocationService.getHost() + '/processes/links?idProcess=' + $scope.processId + '&resend=true';
        	
        	if (idCandidate){
        		
        		url = url.concat('&idCandidate=' + idCandidate);
        		
        	};
        	
        	$http.post(url, {}).then(function (data) {
        		
        		console.log('Links enviados com sucesso.');
        		Materialize.toast('Links enviados com sucesso.', 6000, 'rounded');
        		init();
        		
        	}, function (err) {

        		console.error(err.data);
        		Materialize.toast(err.data, 6000, 'rounded');

        	});

        };

        $scope.getGrades = function () {
        	
        	TestGradeService.query({idProcess: $scope.processId}, function (data) {
        		
        		$scope.tab = 1;
        		
        		$scope.testGrades = data;
        		
        	}, function (err) {
        		
        		console.log(err);
        		
        	});
        	
        };

        $scope.getTest = function () {
        	
        	TestService.get({id: $scope.process.idTest}, function (data) {
        		
        		$scope.tab = 2;
        		
        		$scope.test = data;
        		
        	}, function (err) {
        		
        		console.log(err);
        		
        	});
        	
        };

        $scope.getCandidates = function () {
        	
        	var url = LocationService.getHost() + '/processes/candidates/' + $scope.processId;
        	
        	$http.get(url, {}).then(function (data) {        		

        		$scope.tab = 3;
        		
        		$scope.candidates = data.data;
        		
        	}, function (err) {

        		console.error(err.data);

        	});     

//        	ProcessService.get({id: $scope.processId}, function (data) {
//        		
//        		$scope.tab = 3;
//        		
//        		$scope.candidates = data.candidates;
//
//        	}, function (err) {
//        		
//        		console.log(err);
//
//        	});

        };
        
        $scope.finalizeProcess = function () {
        	
        	ProcessService.delete({'id': $scope.processId}, function (data) {
        		
        		Materialize.toast('Processo finalizado com sucesso.', 6000, 'rounded');
        		init();
        		
        	}, function (err) {
        		
        		Materialize.toast('Ocorreu um erro ao finalizar o processo.', 6000, 'rounded');
        		
        	});
        	
        };
        
        $scope.activateProcess = function () {
        	
        	var url = LocationService.getHost() + '/processes/activate/' + $scope.processId;
        	
        	$http.post(url, {}).then(function (data) {        		

        		Materialize.toast('Processo reativado com sucesso.', 6000, 'rounded');
        		init();
        		
        	}, function (err) {

        		console.error(err.data);
        		Materialize.toast('Ocorreu um erro ao reativar o processo. Tente novamente.', 6000, 'rounded');

        	});        	
       	
        };

        init();

  }]);

})();
(function() {
    'use strict';

    angular.module('tm').controller('CorrectTestController', ["$scope", "$routeParams", "AnswerService", function($scope, $routeParams, AnswerService){
        
        var init = function () {

            $scope.message = '';
            $scope.answers = [];

            if ($routeParams.idCandidate && $routeParams.idProcess) {
            	
            	AnswerService.query({idCandidate: $routeParams.idCandidate, idProcess: $routeParams.idProcess}, function (data) {
            		
            		$scope.answers = data;
            		
            	}, function (err) {
            		
            		console.log(err);
            		
            	});

    		};

        };

        $scope.save = function () {

        	console.log($scope.answers);
        	
        	$scope.answers.forEach(function (a) {
        		
        		a.question = {id: a.question.id};
        		a.candidate = {id: a.candidate.id};
        		a.process = {id: a.process.id};
        		
        	});
        	
        	AnswerService.update($scope.answers, function (data) {
        		
        		$scope.message = 'Correçoes salvas com sucesso.';
        		$scope.answers = [];
        		
        	}, function (err) {
        		
        		$scope.message = 'Ocorreu um erro ao salvar as correções, tente novamente.';
        		console.log(err.data);
        		
        	});

        };

        init();

  }]);

})();
(function () {
    'use strict';

    angular.module('tm').controller('PesqQuestionController', ["$scope", "$timeout", "QuestionService", "ngIntroService", function ($scope, $timeout, QuestionService, ngIntroService) {

    	function init () {

            $scope.questions = [];
            $scope.searchText = '';
            ngIntroService.refresh();

    	};

    	$scope.clearForm = function () {

            $scope.questions = [];
            $scope.searchText = '';

        };

        $scope.buscar = function () {

    		QuestionService.query({searchText: $scope.searchText}, function (data) {

    			$scope.questions = data;

    			noResultforSearch($scope, data);

    		}, function (err) {

    			console.error('Ocorreu um erro ao pesquisar. Tente novamente.', err);
    			Materialize.toast('Ocorreu um erro ao pesquisar. Tente novamente.', 6000, 'rounded');

    		});

        };

        function remove (q, index) {

        	QuestionService.delete({'id': q.id}, function (data) {

        		Materialize.toast('Questão excluida com sucesso.', 6000, 'rounded');
        		$scope.questions.splice(index, 1);

        	}, function (err) {

        		console.error('Erro ao excluir questão.', err);
        		Materialize.toast('Erro ao excluir questão. Tente novamente.', 6000, 'rounded');

        	});

        };

        $scope.validateRemove = function (q, index) {

        	if (q.validate) {
        		remove(q, index);
        	} else {
        		q.validate = true;
        	}

        };
        
        $scope.IntroOptions = {
    			steps : [{
    	    		intro: 'Esta é a pesquisa de questões, aqui você pode buscar as questões criadas previamente.'
    	    	},
    	    	{
    	    		element: document.querySelector('#question-step2'),
    	    		intro: 'Basta utilizar esta barra de busca com qualquer termo relacionado a questão desejada, como descrição ou categoria.',
    	    		position: 'bottom'
    	    	},
    	    	{
    	    		element: document.querySelector('#question-step3'),
    	    		intro: 'Clique aqui para criar uma nova questão.',
    	    		position: 'top'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

        init();

    }]);

})();
(function () {
    'use strict';

    angular.module('tm').controller('CadQuestionController', ["$scope", "$routeParams", "LevelService", "CategoryService", "QuestionService", "ngIntroService", function ($scope, $routeParams, LevelService, CategoryService, QuestionService, ngIntroService) {
    	
    	var index;
    	
    	function init () {
    		
            $scope.alternatives = [];
            $scope.question = {};
            index = 0;
            
            ngIntroService.refresh();

            CategoryService.query({},function (data) {
            	$scope.categories = data;
            }, function (err) {
            	console.error('Erro ao carregar categorias.', err);
            });

            LevelService.query({},function (data) {
            	$scope.levels = data;
            }, function (err) {
            	console.error('Erro ao carregar niveis.', err);
            });

            $scope.tipos = [{
                value: 'MULTIPLA_ESCOLHA',
                name: 'Múltipla Escolha'
            }, {
                value: 'DISCURSIVA',
                name: 'Discursiva'
            }];

    		if ($routeParams.id) {

    			QuestionService.get({id: $routeParams.id}, function (data) {

    				if(data){

    					$scope.question = data;
    					if(data.alternatives) {
    						
    						var altIndex = 1;
    						
    						data.alternatives.forEach(function (alt) {
    							
    							var alternative = {
    	    		            		description: alt.description,
    	    		            		correct: alt.correct,
    	    		            		id: alt.id,
    	    		            		idCheck: 'idCheck' + altIndex
    	    		            };
    							
    							$scope.alternatives.push(alternative);
    							
    							altIndex++;
    							
    						});

    					}

    				} else {

    					Materialize.toast('Erro ao carregar a questão. Tente novamente.', 6000, 'rounded');

    				}

    			}, function (err) {

    				Materialize.toast('Erro ao carregar a questão. Tente novamente.', 6000, 'rounded');
    				console.error('Erro ao carregar a questão', err);

    			});

    		};

    	};
    	
        $scope.IntroOptions = {
    			steps : [{
    	    		intro: 'Aqui você pode cadastrar ou alterar uma questão que será utilizada nas provas enviadas aos seus candidatos.'
    	    	},{
    	    		element: document.querySelector('#cad-question-step2'),
    	    		intro: 'Preencha aqui o enunciado da questão.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-question-step3'),
    	    		intro: 'Aqui você pode indicar se a questão é será do tipo "Múltipla escolha" - em que seu candidato escolhera dentre várias opções a correta. Ou "Dissertativa" - onde seu candidato digitará o texto da resposta. Lembre-se que as questões de "Múltipla escolha" são corrigidas automaticamente quando seu candidato finaliza a prova, enquanto que as "Dissertativas" terão de ser corrigidas manualmente após a finalização da prova.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-question-step4'),
    	    		intro: 'Selecione aqui o nível de dificuldade proposto pela questão. Mantenha um critério para essa seleção, pois facilitará a criação de provas consistentes e correções coerentes no decorrer de seu processo seletivo.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-question-step5'),
    	    		intro: 'A categoria selecionada se refere ao tema da questão. Igualmente ao nível, é importante que essa seleção tenha um critério bem definido.',
    	    		position: 'bottom'
    	    	},{
    	    		intro: 'Caso sua questão seja do tipo "Múltipla escolha", você deve clicar no botão "Inserir" para adicionar as opções de resposta disponíveis para o candidato. Insira no mínimo 2 alternativas, e selecione apenas uma como a resposta correta. Recomendamos de 4 a 6 alternativas, para manter um nível de dificuldade coerente.'
    	    	},{
    	    		intro: 'Já se sua questão for do tipo "Discursiva", você pode inserir uma resposta esperada. Esta resposta esperada é uma base, uma opção correta, porém neste caso a correção é manual, portanto seu candidato pode responder de forma diferente e ainda assim acertar.'
    	    	},{
    	    		element: document.querySelector('#cad-question-step8'),
    	    		intro: 'Após o preenchimento das informações, basta clicar aqui para salvar sua questão.',
    	    		position: 'bottom'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

        $scope.addAlternative = function () {
        	
        	index++;

            var alternative = {
            		description: '',
            		correct: false,
            		idCheck: 'idCheck' + index
            		};

            $scope.alternatives.push(alternative);

        };

        $scope.clearForm = function () {

            $scope.alternatives = [];
            $scope.question = {};

        };

        $scope.save = function () {
            
            if($scope.form.$valid){
            	
            	if($scope.question.type == 'MULTIPLA_ESCOLHA') {
            		
            		var alts = [];
            		
            		$scope.alternatives.forEach(function (value) {
            			
            			var alt = {
            					description: value.description,
                        		correct: value.correct,
                        		id: value.id ? value.id : null
            			};
            			
            			alts.push(alt);
            			
            		});
            		
            		$scope.question.alternatives = alts;
            		
            		if ($scope.question.alternatives.length < 2) {
            			Materialize.toast('Preencha pelo menos 2 alternativas para sua questão.', 6000, 'rounded');
                    	return;
            		}

                    var error = {};

                    //valida alternativas válidas
                    if ($scope.question.alternatives && $scope.question.alternatives.length > 0) {

                        var haveIsCorrect = $scope.question.alternatives.filter(function (alt) {
                            return alt.correct == true;
                        });

                        if (haveIsCorrect.length == 0) {

                        	Materialize.toast('Marque pelo menos uma das alternativas como correta.', 6000, 'rounded');
                            return;

                        } else if (haveIsCorrect.length > 1) {
                        	
                        	Materialize.toast('Marque apenas uma das alternativas como correta.', 6000, 'rounded');
                            return;
                        	
                        }

                        var allHaveText = $scope.question.alternatives.filter(function (alt) {
                            return alt.description == null || alt.description == '';
                        });

                        if (allHaveText.length > 0) {

                        	Materialize.toast('Preencha os textos de todas as alternativas.', 6000, 'rounded');
                            return;

                        }

                    }


            	} else {
            		
            		if (!$scope.question.answer ||  $scope.question.answer == '') {
            			
            			Materialize.toast('Preencha o texto da resposta.', 6000, 'rounded');
            			return;
            			
            		}
            		
            	}
            	
            	if ($scope.question.id) {
            		
                	QuestionService.update($scope.question, function (data) {
                		
                		Materialize.toast('Questão atualizada com sucesso.', 6000, 'rounded');
                        $scope.alternatives = [];
                        $scope.question = {};
                        index = 0;
                		
                	}, function (err) {
                		console.error('Ocorreu um erro ao gravar a alteracao.', err);
                		Materialize.toast('Ocorreu um erro, tente novamente.', 6000, 'rounded');
                	});
            		
            	} else {
            		
                	QuestionService.save($scope.question, function (data) {
                		
                		Materialize.toast('Questão salva com sucesso.', 6000, 'rounded');
                        $scope.alternatives = [];
                        $scope.question = {};
                        index = 0;
                		
                	}, function (err) {
                		console.error('Ocorreu um erro ao gravar a alteracao.', err);
                		Materialize.toast('Ocorreu um erro, tente novamente.', 6000, 'rounded');
                	});
            		
            	};
            	
            };

        };
        
        init();

    }]);

})();
(function () {
    'use strict';

    angular.module('tm').controller('PesqTestController', ["$scope", "$timeout", "TestService", "ngIntroService", function ($scope, $timeout, TestService, ngIntroService) {

    	function init () {

            $scope.tests = [];
            $scope.searchText = '';
            ngIntroService.refresh();

    	};
    	
        $scope.IntroOptions = {
    			steps : [{
    	    		intro: 'Esta é a pesquisa de provas, aqui você pode buscar as provas criadas previamente.'
    	    	},
    	    	{
    	    		element: document.querySelector('#test-step2'),
    	    		intro: 'Basta utilizar esta barra de busca com qualquer termo relacionado a prova desejada, como descrição ou categorias',
    	    		position: 'bottom'
    	    	},
    	    	{
    	    		element: document.querySelector('#test-step3'),
    	    		intro: 'Clique aqui para criar uma nova prova.',
    	    		position: 'top'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

    	$scope.clearForm = function () {

            $scope.tests = [];
            $scope.searchText = '';

        };

        $scope.buscar = function () {

			TestService.query({searchText: $scope.searchText}, function (data) {
	
				$scope.tests = data;
	
				noResultforSearch($scope, data);
	
			}, function (err) {
	
				console.error('Ocorreu um erro ao pesquisar. Tente novamente.', err);
				Materialize.toast('Ocorreu um erro ao pesquisar. Tente novamente.', 6000, 'rounded');
	
			});

        };
        
        $scope.desativar = function (test, index) {
        	
        	console.log('id to delete: ', test.id);
        	
        	test.active = false;
        	
        	TestService.update(test, function (data) {
        		
        		Materialize.toast('Prova desativada com sucesso.', 6000, 'rounded');
        		$scope.tests.splice(index, 1);
        		
        	}, function (err) {
        		
        		console.error('Erro ao desativar prova.', err);
        		Materialize.toast('Erro ao desativar prova. Tente novamente.', 6000, 'rounded');
        		
        	});
        	
        };
        
        function remove (t, index) {

        	TestService.delete({'id': t.id}, function (data) {

        		Materialize.toast('Prova excluída com sucesso.', 6000, 'rounded');
        		$scope.tests.splice(index, 1);

        	}, function (err) {

        		console.error('Erro ao excluir prova.', err);
        		Materialize.toast('Erro ao excluir prova. Tente novamente.', 6000, 'rounded');

        	});

        };

        $scope.validateRemove = function (t, index) {

        	if (t.validate) {
        		remove(t, index);
        	} else {
        		t.validate = true;
        	}

        };

        init();

    }]);

})();
(function () {
    'use strict';

    angular.module('tm').controller('CadTestController', ["$scope", "$routeParams", "LevelService", "CategoryService", "TestService", "QuestionService", "ngIntroService", function ($scope, $routeParams, LevelService, CategoryService, TestService, QuestionService, ngIntroService) {
    	
    	var index;
    	
    	function init () {

            $scope.test = {};
            
            ngIntroService.refresh();
            
            $scope.availableCategories = [];
            $scope.selectedCategories = [];
            
            $scope.selectedQuestions = [];
            $scope.availableQuestions = [];
            
            $scope.searchCategoryText = '';
            $scope.searchQuestionText = '';

            LevelService.query({},function (data) {
            	$scope.levels = data;
            }, function (err) {
            	console.error('Erro ao carregar niveis.', err);
            });
            
            if ($routeParams.process) {
            	console.log('processo: ' + $routeParams.process);
            	$scope.test.idProcess = $routeParams.process;
            }

    		if ($routeParams.id) {

    			TestService.get({id: $routeParams.id}, function (data) {

    				if(data){

    					$scope.test = data;
    					$scope.selectedQuestions = data.questions;
    					$scope.selectedCategories = data.categories;

    				} else {

    					Materialize.toast('Erro ao carregar a prova. Tente novamente.', 6000, 'rounded');

    				}

    			}, function (err) {

    				Materialize.toast('Erro ao carregar a prova. Tente novamente.', 6000, 'rounded');
    				console.error('Erro ao carregar a prova', err);

    			});

    		};

    	};
    	
        $scope.IntroOptions = {
    			steps : [{    	    		
    	    		intro: 'Aqui você pode criar ou alterar uma prova, preenchendo seus dados e associando as questões desejadas.'
    	    		
    	    	},{
    	    		element: document.querySelector('#cad-test-step2'),
    	    		intro: 'Preencha aqui o nome desejado para a prova, um nome curto que remeta ao tipo de profissional desejado. Exemplo: "Analista de Sistemas Pleno" ou "Desenvolvedor Java Junior".',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-test-step3'),
    	    		intro: 'Aqui você pode ter um descritivo um pouco mais detalhado da prova. Por exemplo "Foco em determinado framework, vivência com tal metodologia".',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-test-step4'),
    	    		intro: 'Aqui você escolhe qual o nível de conhecimento esperado para o conjunto de questões a ser selecionado.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-test-step5'),
    	    		intro: 'Aqui você pode selecionar diversas categorias para sua prova, ou seja, os assuntos abordados nas questões.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-test-step6'),
    	    		intro: 'Aqui você digitará os termos para a busca das questões a serem selecionadas para a prova.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-test-step7'),
    	    		intro: 'Aqui você pode verificar todas as questões já selecionadas para a prova, e excluir alguma questão da lista clicando no ícone do do lado direito da questão desejada.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-test-step8'),
    	    		intro: 'Após o preenchimento das informações necessárias, clique aqui para salvar sua prova.',
    	    		position: 'bottom'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

        $scope.clearForm = function () {

            $scope.test = {};

        };

        $scope.save = function () {
            
            if($scope.form.$valid){
            	
            	if ($scope.selectedCategories.length > 0) {
            		
            		$scope.test.categories = $scope.selectedCategories; 
            		
            	} else {
            		
            		Materialize.toast('Selecione pelo menos uma categoria para a prova.', 6000, 'rounded');
            		return;
            		
            	}
            	
            	$scope.test.questions = $scope.selectedQuestions; 

            	if ($scope.test.id) {
            		
                	TestService.update($scope.test, function (data) {
                		
                		Materialize.toast('Prova atualizada com sucesso.', 6000, 'rounded');
                        $scope.test = {};

                        $scope.availableCategories = [];
                        $scope.selectedCategories = [];
                        
                        $scope.selectedQuestions = [];
                        $scope.availableQuestions = [];
                        
                        $scope.searchCategoryText = '';
                        $scope.searchQuestionText = '';

                	}, function (err) {
                		console.error('Ocorreu um erro ao gravar a alteracao.', err);
                		Materialize.toast('Ocorreu um erro, tente novamente.', 6000, 'rounded');
                	});
            		
            	} else {
            		
                	TestService.save($scope.test, function (data) {
                		
                		Materialize.toast('Prova salva com sucesso.', 6000, 'rounded');
                        $scope.test = {};

                        $scope.availableCategories = [];
                        $scope.selectedCategories = [];
                        
                        $scope.selectedQuestions = [];
                        $scope.availableQuestions = [];
                        
                        $scope.searchCategoryText = '';
                        $scope.searchQuestionText = '';

                	}, function (err) {
                		console.error('Ocorreu um erro ao gravar a alteracao.', err);
                		Materialize.toast('Ocorreu um erro, tente novamente.', 6000, 'rounded');
                	});
            		
            	};
            	
            };

        };
        
        $scope.searchCategories = function () {

            CategoryService.query({searchText: $scope.searchCategoryText},function (data) {
            	$scope.availableCategories = data;
            }, function (err) {
            	console.error('Erro ao carregar categorias.', err);
            	Materialize.toast('Ocorreu um erro, tente novamente.', 6000, 'rounded');
            });

        };
        
        $scope.searchQuestions = function () {

        	QuestionService.query({searchText: $scope.searchQuestionText}, function (data) {
        		$scope.availableQuestions = data;
        	}, function (err) {
        		console.error('Erro ao carregar questoes.', err);
        		Materialize.toast('Ocorreu um erro, tente novamente.', 6000, 'rounded');
        	});

        };
        
        $scope.selectQuestion = function (question) {
        	
        	moveElement(question, $scope.availableQuestions, $scope.selectedQuestions);
        	
        };

        $scope.selectCategory = function (category) {

            moveElement(category, $scope.availableCategories, $scope.selectedCategories);

        };

        $scope.removeCategory = function (category) {

            moveElement(category, $scope.selectedCategories, $scope.availableCategories);

        };
        
        $scope.removeQuestion = function (question) {
        	
        	moveElement(question, $scope.selectedQuestions, $scope.availableQuestions);
        	
        };

        var moveElement = function(obj, from, to) {

            var i = 0;

            while(i < from.length) {

                var actual = from[i];

                if(obj.id == actual.id) {
                    
                    from.splice(i, 1);
                    to.push(actual);
                    break;
                }
                
                i++;
            }
        };
        
        init();

    }]);

})();
(function () {
    'use strict';

    angular.module('tm').controller('PesqCandidateController', ["$scope", "$timeout", "CandidateService", "ngIntroService", function ($scope, $timeout, CandidateService, ngIntroService) {

    	function init () {

            $scope.candidates = [];
            $scope.searchText = '';
            ngIntroService.refresh();

    	};

    	$scope.clearForm = function () {

            $scope.candidates = [];
            $scope.searchText = '';

        };
        
        $scope.buscar = function () {
        	
    		CandidateService.query({searchText: $scope.searchText}, function (data) {

    			$scope.candidates = data;
    			
    			noResultforSearch($scope, data);

    		}, function (err) {

    			console.error('Ocorreu um erro ao pesquisar. Tente novamente.', err);
    			Materialize.toast('Ocorreu um erro ao pesquisar. Tente novamente.', 6000, 'rounded');

    		});

        };

        function remove (c, index) {

        	CandidateService.delete({'id': c.id}, function (data) {

        		Materialize.toast('Candidato excluído com sucesso.', 6000, 'rounded');
        		$scope.candidates.splice(index, 1);

        	}, function (err) {

        		console.error('Erro ao excluir candidato.', err);
        		Materialize.toast('Erro ao excluir candidato. Tente novamente.', 6000, 'rounded');

        	});

        };

        $scope.validateRemove = function (c, index) {

        	if (c.validate) {
        		remove(c, index);
        	} else {
        		c.validate = true;
        	}

        };
        
        $scope.IntroOptions = {
    			steps : [{
    	    		intro: 'Esta é a pesquisa de candidatos, aqui você pode buscar os candidatos criados previamente.'
    	    	},
    	    	{
    	    		element: document.querySelector('#candidate-step2'),
    	    		intro: 'Basta utilizar esta barra de busca inserindo partes do nome ou e-mail do candidato desejado.',
    	    		position: 'bottom'
    	    	},
    	    	{
    	    		element: document.querySelector('#candidate-step3'),
    	    		intro: 'Clique aqui para criar um novo candidato.',
    	    		position: 'top'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

        init();

    }]);

})();
(function () {
    'use strict';

    angular.module('tm').controller('CadCandidateController', ["$scope", "$routeParams", "CandidateService", "ngIntroService", function ($scope, $routeParams, CandidateService, ngIntroService) {
    	
    	var index;
    	
    	function init () {

            $scope.candidate = {};
            
            if ($routeParams.process) {
            	console.log('processo: ' + $routeParams.process);
            	$scope.candidate.processes = [];
            	var process = {'id': $routeParams.process};
            	$scope.candidate.processes.push(process);
            }
            
            ngIntroService.refresh();

    		if ($routeParams.id) {

    			CandidateService.get({id: $routeParams.id}, function (data) {

    				if(data){

    					$scope.candidate = data;

    				} else {

    					Materialize.toast('Erro ao carregar o candidato. Tente novamente.', 6000, 'rounded');

    				}

    			}, function (err) {

    				Materialize.toast('Erro ao carregar a candidato. Tente novamente.', 6000, 'rounded');
    				console.error('Erro ao carregar a candidato', err);

    			});

    		} else {
    			$scope.candidate.active = true;
    		}

    	};
    	
        $scope.IntroOptions = {
    			steps : [{
    	    		intro: 'Aqui você pode cadastrar ou alterar um candidato, que participará dos processos seletivos.'
    	    	      },{
    	    		element: document.querySelector('#cad-cand-step2'),
    	    		intro: 'Basta preencher o nome.',
    	    		position: 'bottom'
    	    	      },{
    	    		element: document.querySelector('#cad-cand-step3'),
    	    		intro: 'E o e-mail do seu candidato.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-cand-step4'),
    	    		intro: 'E clicar em "Salvar". Pronto! Seu candidato foi inserido e já pode ser associado a processos através da tela de "Processos"',
    	    		position: 'top'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

        $scope.clearForm = function () {

            $scope.candidate = {};

        };

        $scope.save = function () {

        	if($scope.form.$valid){

            	$scope.candidate.active = true;

            	if ($scope.candidate.id) {

            		CandidateService.update($scope.candidate, function (data) {

                		Materialize.toast('Candidato atualizado com sucesso.', 6000, 'rounded');
                        $scope.candidate = {};

                	}, function (err) {
                		console.error('Ocorreu um erro ao gravar a alteracao.', err);
                		Materialize.toast('Ocorreu um erro, tente novamente.', 6000, 'rounded');
                	});

            	} else {

            		CandidateService.save($scope.candidate, function (data) {

                		Materialize.toast('Candidato salvo com sucesso.', 6000, 'rounded');
                        $scope.candidate = {};

                	}, function (err) {
                		console.error('Ocorreu um erro ao gravar a alteracao.', err);
                		Materialize.toast('Ocorreu um erro, tente novamente.', 6000, 'rounded');
                	});
            		
            	};
            	
            };

        };
        
        init();

    }]);

})();
(function () {
    'use strict';

    angular.module('tm').controller('CadUserController', ["$scope", "$routeParams", "SubscriptionService", "ngIntroService", function ($scope, $routeParams, SubscriptionService, ngIntroService) {

    	var index;

    	function init () {

    		$scope.message = '';
    		$scope.password = ''
    		$scope.passwordConfirm = '';
            $scope.user = {};
            $scope.subscription = {};
            
            ngIntroService.refresh();

			SubscriptionService.get({}, function (data) {
				
				if (data) {

					$scope.user = data.user;
    				$scope.subscription = data;

				} else {

					Materialize.toast('Erro ao carregar seu cadastro. Tente novamente.', 6000, 'rounded');

				};

			}, function (err) {

				console.error(err);
				Materialize.toast('Erro ao carregar seu cadastro. Tente novamente.', 6000, 'rounded');

			});

    	};
    	
        $scope.IntroOptions = {
    			steps : [{
    	    		element: document.querySelector('#cad-user-step1'),
    	    		intro: 'Aqui você pode verificar os dados do seu cadastro.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-user-step2'),
    	    		intro: 'Aqui você pode alterar sua senha de acesso.',
    	    		position: 'bottom'
    	    	},{
    	    		element: document.querySelector('#cad-user-step3'),
    	    		intro: 'Aqui você pode verificar os dados do seu plano, como vigência, testes restantes e valor do plano.',
    	    		position: 'bottom'
    	    	}],
    			showStepNumbers : false,
    			showBullets : false,
    			exitOnOverlayClick : true,
    			exitOnEsc : true,
    			nextLabel : '>>',
    			prevLabel : '<<',
    			skipLabel : 'sair',
    			doneLabel : 'ok'
    		};

        $scope.updatePass = function () {

        	if ($scope.password != '' && $scope.passwordConfirm != '') {

        		if ($scope.password == $scope.passwordConfirm) {

        			var passMessage = checkPwd($scope.password);

        			if (passMessage != '') {

        				Materialize.toast(passMessage, 6000, 'rounded');
        				return;

        			}

        			SubscriptionService.update({user: '', pass: $scope.password}, function (data) {

        				Materialize.toast('Senha atualizada com sucesso.', 6000, 'rounded');
        				$scope.password = ''
        		    	$scope.passwordConfirm = '';

        			}, function (err) {

        				$scope.message = err.data;

        			});

        		} else {

        			Materialize.toast('Ambos os campos de senha precisam ser iguais.', 6000, 'rounded');

        		}

        	} else {

        		Materialize.toast('Preencha ambos os campos de senha.', 6000, 'rounded');

        	}

        };
        
        $scope.resetIntros = function () {
        	resetAllIntros();
        	Materialize.toast('Tutoriais reiniciados, visite novamente as outras telas para visualizar.', 6000, 'rounded');
        };
        
        init();

    }]);

})();
(function() {
    'use strict';

    angular.module('tm').controller('AppController', ["$scope", "$location", "AuthService", "AUTH_EVENTS", function($scope, $location, AuthService, AUTH_EVENTS){
        
    	$scope.username = AuthService.username();
    	$scope.authenticated = AuthService.isAuthenticated();
    	 
    	$scope.$on(AUTH_EVENTS.notAuthenticated, function(event) {
    	    AuthService.logout();
    		$scope.username = AuthService.username();
    		$scope.authenticated = AuthService.isAuthenticated();
    	    console.error('Usuario não autenticado!');
    	    $location.path('login');
    	});
   	 
    	$scope.$on(AUTH_EVENTS.authenticated, function(event) {
    		$scope.username = AuthService.username();
    		$scope.authenticated = AuthService.isAuthenticated();
    	});
    	 
    	$scope.setCurrentUsername = function(name) {
    	    $scope.username = name;
    	};
    	
    	$scope.logout = function () {
    		AuthService.logout();
    		$location.path('login');
    	};

  }]);

})();
(function() {
    'use strict';

    angular.module('tm').controller('LoginController', ["$scope", "AuthService", "$location", function($scope, AuthService, $location){

    	$scope.data = {};

    	$scope.login = function() {
    		AuthService.login($scope.data.username, $scope.data.password).then(function(authenticated) {
    			$scope.setCurrentUsername($scope.data.username);
    			console.info('Redirecionando para home.');
    			Materialize.toast('Bem vindo ao Trymee!', 6000, 'rounded');
    			$location.path('/');
    	    }, function(err) {
    	    	console.log(err);
    	    	Materialize.toast(err, 6000, 'rounded');
    	    });
    	};
    }]);
})();
(function() {
  'use strict';

    angular.module('tm').factory('QuestionService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/questions/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

    angular.module('tm').factory('ProcessService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/processes/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

    angular.module('tm').factory('TestService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/tests/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

    angular.module('tm').factory('LevelService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/levels/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

    angular.module('tm').factory('CategoryService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/categories/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

    angular.module('tm').factory('CandidateService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/candidates/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

    angular.module('tm').factory('TestGradeService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/testGrades/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

    angular.module('tm').factory('AnswerService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/answers/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

    angular.module('tm').factory('SubscriptionService', ["$resource", "LocationService", function ($resource, LocationService) {

        return $resource(LocationService.getHost() + '/subscriptions/:id', null, {
            'update': {
                method: 'PUT'
            }
        });

    }]);

})();
(function() {
  'use strict';

  	angular.module('tm').value('LocationService', function () {

    	var context = 'trymee';
    	var api = 'api';
    	
    	var getHost = function () {

        	var pathArray = location.href.split( '/' );
        	var prot = pathArray[0];
        	var host = pathArray[2].split(':')[0];
        	
        	if (host == 'localhost')
        		host = host + ':8080';

        	var completeHost = prot + '//' + host + '/' + context + '/' + api;

        	return completeHost;

    	};

    	var obj = {
    		getHost: getHost
    	};		

    	return obj;

    }());

})();
(function() {
  'use strict';

    angular.module('tm').factory('AuthService', ["$q", "$http", "$location", "$rootScope", "LocationService", "AUTH_EVENTS", function ($q, $http, $location, $rootScope, LocationService, AUTH_EVENTS) {
    	
    	var LOCAL_TOKEN_KEY = 'localTokenTM';
    	var LOCAL_USER_NAME = 'localUserNameTM';
    	var username = '';
    	var isAuthenticated = false;
    	var authToken;
    	 
    	function loadUserCredentials() {
    		console.info('Procurando token previamente salvo.');
    		var token = window.sessionStorage.getItem(LOCAL_TOKEN_KEY);
//    		username = window.sessionStorage.getItem(LOCAL_USER_NAME);
    	    if (token) {
    	    	useCredentials(token);
    	    } else {
    	    	console.info('Token não encontrado. Redirecionando para login.');
    	    	$location.path('login');
    	    }
    	};
    	 
    	function storeUserCredentials(token) {
    		console.info('Gravando token para utilização.');
    	    window.sessionStorage.setItem(LOCAL_TOKEN_KEY, token);
//    	    window.sessionStorage.setItem(LOCAL_USER_NAME, username);
    	    useCredentials(token);
    	}
    	 
    	function useCredentials(token) {
    		console.info('Token encontrado, usando credenciais.');
//    		username = token.split(' . ')[0];
    	    isAuthenticated = true;
    	    authToken = token;    	 
    	    $http.defaults.headers.common['authorization'] = token;
    	}
    	 
    	function destroyUserCredentials() {
    		console.info('Apagando token e finalizando a sessão.');
    	    authToken = undefined;
    	    username = '';
    	    isAuthenticated = false;
    	    $http.defaults.headers.common['authorization'] = undefined;
    	    window.sessionStorage.removeItem(LOCAL_TOKEN_KEY);
//    	    window.sessionStorage.removeItem(LOCAL_USER_NAME);
    	    $rootScope.$broadcast(AUTH_EVENTS.authenticated, null);
    	}
    	 
    	var login = function(name, pw) {
    		console.info('Tentando efetuar login.');
    	    return $q(function(resolve, reject) {
    	    	$http.post(LocationService.getHost() + '/tokens',{user:name, pass:pw}).then(function (data) {
    	    		console.info('Login bem sucedido.');
      	    	  	var tk = data.data;
      	    	  	username = name;
      	    	  	storeUserCredentials(tk);
      	    	  	resolve('Login success.');
        			$rootScope.$broadcast(AUTH_EVENTS.authenticated, null);
    	    	}, function (err) {
    	    		console.error('Ocorreu um erro no login', err);
    	    		reject(err.data);
    	    	});
    	    });
    	};
    	 
    	var logout = function() {
    		destroyUserCredentials();
    	};

    	loadUserCredentials();

    	return {
    	    login: login,
    	    logout: logout,
    	    isAuthenticated: function() {return isAuthenticated;},
    	    username: function() {return username;},
    	    role: function() {return role;}
    	};
    }]).factory('AuthInterceptor', ["$rootScope", "$q", "AUTH_EVENTS", function ($rootScope, $q, AUTH_EVENTS) {
    	return {
    		responseError: function (response) {
    			console.error('Tentativa de acesso não autenticado.');
    			$rootScope.$broadcast({
    		        401: AUTH_EVENTS.notAuthenticated    		        
    		      }[response.status], response);
    		      return $q.reject(response);
    		    }
    		  };
    		}]).config(["$httpProvider", function ($httpProvider) {
    			$httpProvider.interceptors.push('AuthInterceptor');
    		}]).constant('AUTH_EVENTS', {
    			notAuthenticated: 'auth-not-authenticated',
    			notAuthorized: 'auth-not-authorized',
    			authenticated: 'auth-successful'
    		});
})();
function checkPwd(str) {
    if (str.length < 8) {
        return('A senha não contém 8 caracteres');
    } else if (str.length > 16) {
        return('A senha contém mais de 16 caracteres');
    } else if (str.search(/\d/) == -1) {
        return('A senha não contém números');
    } else if (str.search(/[a-zA-Z]/) == -1) {
        return('A senha não contém letras');
    } else if (str.search(/[^a-zA-Z0-9\!\@\#\$\%\^\&\*\(\)\_\+]/) != -1) {
        return('A senha contém caracteres inválidos');
    }
    return('');
}

function validateForm() {
	
	var str = document.forms['cadForm']['pass'].value;
	
	var message = checkPwd(str);
	
	if (message.length == 0) {
		return true;
	} else {
		Materialize.toast(message, 4000, 'rounded');
		return false;
	}

}

function noResultforSearch(scope, data) {
	
	if (data.length < 1)
		Materialize.toast('Nenhum resultado encontrado.', 6000, 'rounded');
	
}
$(document).ready(function(){

	$.getJSON("js/git.js", function(json) {
	    var commit_time = 'commit time: ' + json['git.commit.time'];
		var build_time = 'build time: ' + json['git.build.time'];
		var commit_id = 'commit id: ' + json['git.commit.id.abbrev'];
		$("#version-info").val(commit_time + ' - ' + build_time + ' - ' + commit_id);
	});

});